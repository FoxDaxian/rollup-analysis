import dep__default, { await as await$1, break as break$1, case as case$1, catch as catch$1, class as class$1, const as const$1, continue as continue$1, debugger as debugger$1, delete as delete$1, do as do$1, else as else$1, enum as enum$1, eval as eval$1, export as export$1, extends as extends$1, finally as finally$1, for as for$1, function as function$1, if as if$1, implements as implements$1, import as import$1, in as in$1, instanceof as instanceof$1, interface as interface$1, let as let$1, new as new$1, null as null$1, package as package$1, private as private$1, protected as protected$1, public as public$1, return as return$1, static as static$1, super as super$1, switch as switch$1, throw as throw$1, try as try$1, typeof as typeof$1, undefined as undefined$1, var as var$1, void as void$1, while as while$1, with as with$1, yield as yield$1 } from 'dep';

console.log(await$1);
console.log(break$1);
console.log(case$1);
console.log(catch$1);
console.log(class$1);
console.log(const$1);
console.log(continue$1);
console.log(debugger$1);
console.log(dep__default);
console.log(delete$1);
console.log(do$1);
console.log(else$1);
console.log(enum$1);
console.log(eval$1);
console.log(export$1);
console.log(extends$1);
console.log(finally$1);
console.log(for$1);
console.log(function$1);
console.log(if$1);
console.log(implements$1);
console.log(import$1);
console.log(in$1);
console.log(instanceof$1);
console.log(interface$1);
console.log(let$1);
console.log(new$1);
console.log(null$1);
console.log(package$1);
console.log(private$1);
console.log(protected$1);
console.log(public$1);
console.log(return$1);
console.log(static$1);
console.log(super$1);
console.log(switch$1);
console.log(throw$1);
console.log(try$1);
console.log(typeof$1);
console.log(undefined$1);
console.log(var$1);
console.log(void$1);
console.log(while$1);
console.log(with$1);
console.log(yield$1);
